# -*- coding: utf-8 -*-
"""Numpy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aZjz-UnMVGgO05OmlOPKzx1fe-dVKqe8
"""

import numpy as np

### creating array from list
# need only one argument that is list

arr_1 = np.array([1,2,3])
print("1d array: ",arr_1) #1d array:  [1 2 3]

arr_2 = np.array([[1,2,3],[4,5,6]])
print("2d array:\n",arr_2)  #2d array:  [[1 2 3]
                  #                    [4 5 6]]

###list vs numpy array
py_list = [1,2,3]
print("python list multiplication: ",py_list*2) #[1, 2, 3, 1, 2, 3]

np_array = np.array([1,2,3]) #element wise multiplications
print("numpy array multiplication: ",np_array*2)  # [2 4 6]

# creating array from scratch
zeros = np.zeros([2,3])
print("zero array \n",zeros)
# zero array
# [[0. 0. 0.]
# [0. 0. 0.]]

ones = np.ones([3,4])
print("ones array \n",ones)
# ones array
#  [[1. 1. 1. 1.]
#  [1. 1. 1. 1.]
#  [1. 1. 1. 1.]]

full = np.full((2,4),4) #for special type or constant
print("full array \n",full)
# full array
#  [[4 4 4 4]
#  [4 4 4 4]]

# to create random from 0 to 1
random = np.random.random([2,3])
print("random array \n",random)
# random array
#  [[0.83587305 0.68689813 0.23384485]
#  [0.87119283 0.11363152 0.01524033]]

sequence =np.arange(0,11,2)
print("sequence \n",sequence)
# sequence
#  [ 0  2  4  6  8 10]

# vector,matrix,tensor:
vector = np.array([1,2,3,4,5])
print("vector \n",vector)
# vector
#  [1 2 3 4 5]

matrix = np.array([[1,2,3],
                   [4,5,6]])
print("matrix \n",matrix)
# matrix
#  [[1 2 3]
#  [4 5 6]]

tensor = np.array([[1,2],[3,4],
                   [4,5],[6,7]])
print("tensor \n",tensor)
# tensor
#  [[1 2]
#  [3 4]
#  [4 5]
#  [6 7]]

###array properties
arr = np.array([[1,2,3],
                [4,5,6]])
print("shape: ",arr.shape)      # (2, 3)
print("dimension: ",arr.ndim)     #2
print("size: ",arr.size)        #6
print("Dtype",arr.dtype)        #int64

###array reshaping
arr = np.arange(12)
print("original array: ",arr)  # [ 0  1  2  3  4  5  6  7  8  9 10 11]

reshaped = arr.reshape((3,4))
print("\n reshaped array: ",reshaped)
# reshaped array:  [[ 0  1  2  3]
#  [ 4  5  6  7]
#  [ 8  9 10 11]]

flattened = reshaped.flatten()
print("\n flattened array: ",flattened) #returns copy
#  flattened array:  [ 0  1  2  3  4  5  6  7  8  9 10 11]

# ravel(returns view, instead copy)
raveled = reshaped.ravel()
print("\n revaled: ",raveled)  #[ 0  1  2  3  4  5  6  7  8  9 10 11]

# transpose
transpose = reshaped.T
print("\n transposed: ",transpose)
#  [[ 0  4  8]
#  [ 1  5  9]
#  [ 2  6 10]
#  [ 3  7 11]]

# array operation
arr = np.array([1,2,3,4,5,6,7,8,9])
print("basic slicing: ",arr[2:6])   #[3 4 5 6]
print("with step: ",arr[1:8:2])       #[2 4 6 8]
print("negative index: ",arr[-3])      #7

arr_2d = np.array([[1,2,3],
                   [4,5,6],
                   [7,8,9]])
print("specific element: ",arr_2d[1,2]) #first row, second index (6)
print("entire row: ",arr_2d[1])
print("for column: ",arr_2d[:,1]) #all row and 1st colums

###sorting
unsorted = np.array([3,1,5,2,6,4,7,4,3,8])
print("sorted: ",np.sort(unsorted))       #[1 2 3 3 4 4 5 6 7 8]

arr_2d_unsorted = np.array([[3,1],[1,2],[2,3]])
print("2d array sorting by column:\n",np.sort(arr_2d_unsorted,axis = 0))  #2d array sorting by column:
 #                                                                        [[1 1]
 #                                                                        [2 2]
 #                                                                        [3 3]]

##filter
numbers = np.array([1,2,3,4,5,6,7,8,9,10])
even_number = numbers[numbers % 2 == 0]
print("even numbers: ",even_number) #[ 2  4  6  8 10]

#filter with mask
mask = numbers > 5
print("numbers greater than 5",numbers[mask]) # [ 6  7  8  9 10]

#fancy indexing vs where()
indices = [0,2,4]
print(numbers[indices]) #[1 3 5]

where_result = np.where(numbers < 5)
print("NP where : ",numbers[where_result]) #NP where :  [1 2 3 4]

condition_array = np.where(numbers < 5)
print(condition_array)

condition_array = np.where(numbers > 5,numbers*3,"small")
print(condition_array)
#output:
['small' 'small' 'small' 'small' 'small' '18' '21' '24' '27' '30']

# where condition is like if else statement
# like the numbers greater then 5 , x , y
# number which greater than 5 they multiply by 3 else write small to numbers less than 5

condition_array = np.where(numbers>5,"True","False")
print(condition_array) #numbers less than 5 are false and bigger are true
#output:
# ['False' 'False' 'False' 'False' 'False' 'True' 'True' 'True' 'True' 'True']

#Adding and removing data
import numpy as np
array1 = np.array([1,2,3,4])
array2 = np.array([5,6,7,8])
combined = np.concatenate((array1, array2))
print(combined) #[1 2 3 4 5 6 7 8]

#array compatibility
a = np.array([1,2,3,4])
b = np.array([5,6,7,8])
c = np.array([9,10,11,12])
print("compatibility is ",a.shape == b.shape) #compatibility is  True

#adding the row
original = np.array([[1,2],[3,4]])
new_row = np.array([[5,6]])
with_new_row = np.vstack((original,new_row)) #vstack always add rows
print(with_new_row)
#vstack -> vertical stack
# output:
# [[1 2]
#  [3 4]
#  [5 6]]

#for column: we use hstack -> horizontal stack
new_col = np.array([[7],[8]])
with_new_column = np.hstack((original,new_col))
print(with_new_column)
 #output:
# [[1 2 7]
#  [3 4 8]]

#deletion
arr = np.array([1,2,3,4])
deleted = np.delete(arr,2)
print("array after deletion ",deleted)
output:
# array after deletion  [1 2 4]

