two- pointer technique:
this is used when we work on two pointers on array(start,end)
one pointer(left) another pointer (right)
both moves forward and backward

Example problems:

Move Zeroes

Reverse Array

Two Sum (Sorted array)

Container with Most Water

example(reverse the array)
arr = [1, 2, 3, 4, 5]
# Output: [5, 4, 3, 2, 1]
logic :
we have array and have to reverse it
so, left should be zero for right , right = len(arr)-1
while left<right
we swap left array to right array
left+=1
right-=1

1.revesrse array
def reverse_array(arr):
  left = 0
  right = len(arr) - 1
  while left<right:
    arr[left],arr[right]=arr[right],arr[left]
    left+=1
    right-=1
  return arr
reverse_array([1,2,3,4,5])

2. remove duplicates from sorted array
we have given an inceremented sorted array we have to remove duplicates from it
Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
code:
class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        i = 1

        for j in range(1, len(nums)):
            if nums[j] != nums[i - 1]:
                nums[i] = nums[j]
                i += 1
        return i
  explaination:
i =1 , We initialize the variable i to 1. This pointer i will be used to place the next unique element found in the array. Since the first element is always unique, we start i from 1.

for j in range(1, len(nums)): ,This for loop starts with j set to 1 and iterates through the array until the end. The pointer j is used to traverse the array and check for duplicates.

if nums[j] != nums[i - 1]:  ,Inside the loop, we check if the current element nums[j] is different from the previous unique element nums[i - 1]. If they are different, it means nums[j] is a unique element.

nums[i] = nums[j]
i += 1           ,If the condition nums[j] != nums[i - 1] is true, we set nums[i] to nums[j], placing the unique element at the i-th position. We then increment i by 1 to prepare for the next unique element.

return i , to return the count of unique elements


