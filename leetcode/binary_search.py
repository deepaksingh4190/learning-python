# -*- coding: utf-8 -*-
"""binary_search.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EOjw0zd1hQZEN3SmUPaMOldp7X5T3d5S
"""

# binary search work on sorted array
# we search for the middle element in array and half space in every step
example : when we find a word like "zebra" in dictionary so we open it from middle and saw that it is is present in befor or after

# logic
start = 0
end = len(arr)-1
we find the mid: (start+end)//2
if arr[mid] == target, then we found
elif target<arr[mid] we go to left half : end= mid-1
else target > arr[mid] got to right half : sart = mid + 1

time complexity:
linear search : O(n)
binary search: O(log n)

arr = [10,20,30,40,50]
target = 50

found = False
start = 0       #first index(0)
end = len(arr)-1   #last index(4)

while start <= end:   #loop started from start to end
  mid = (start+end)//2            #find mid value
  if arr[mid]== target:
    print("found at index: ",mid)
    found = True
    break
  elif target > arr[mid]:     #if target bigger than mid then we go to right side (mid + 1)
    start = mid +1
  else:
    end = mid - 1            #else go to lest side and discard left side elements
if not found:
  print("not found")
  #output:
  # found at index:  4

arr = [10,20,30,40,50]
target = 15

found = False
start = 0
end = len(arr)-1

while start <= end:
  mid = (start+end)//2
  if arr[mid]== target:
    print("found at index: ",mid)
    found = True
    break
  elif target > arr[mid]:
    start = mid + 1
  else:
    end = mid -1
if not found:
  print("not found")
#output:
not found