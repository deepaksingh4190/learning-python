# -*- coding: utf-8 -*-
"""exception_handling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10VkH85NClaTq1-XBd5ZCdUbcdt8exoc3

when we write a code if there is an error occurred like(devide by 0, file not found etc.) that's called exception.
to handle these errors we use
 try, except, finally, else
"""

# basic try except :
try:
  x = 5/0
except ZeroDivisionError:
  print("cant devide by zero")

# catch any error
try:
  name = input("enter your name: ")
except:
  print("invalid name")

# catch specific error
try:
  x = int(input("enter the number: "))
  print(10/x)
except ValueError:
  print("Invlid number")
except ZeroDivisionError:
  print("cant devide by zero")

# use of else
try:
  x = 10/2
except:
  print("invalid")
else:
  print("everything okay")

# use of finally
try:
  f = open("demo.txt","r")
  data = f.read()
except:
  print("error occured")
finally:
  print("successfully open the file")

# raise custom error
x = -4
if x<0:
  raise ValueError("only positive value allowed")

# safe devision
try:
  a = int(input("enter the number:"))
  b = int(input("enter the number: "))
  print("result",a/b)
except ZeroDivisionError:
  print("cant devide by zero")
except ValueError:
  print("enter the valid number")
finally:
  print("program ended")

""" Real Use Cases:
Input validation

File handling

APIs & network errors

DB operations

Production-level error handling/logging


"""

# handling by division with zer
try:
  a = int(input("enter the number: "))
  b = int(input("enter the number: "))
  print("result = ",a/b)
except ZeroDivisionError:
  print("cant devide by zero")

try:
  age = int(input("enter your age: "))
  print("you will be",age + 1,"years old in next year")
except ValueError:
  print("fill appropriate age")

# index list variable
colour = ["blue","green","orange","red","pink"]
try:
  idx = int(input("enter the index: "))
  print(colour[idx])
except IndexError:
  print("index is out of range")
except ValueError:
  print("enter the valid index")

# open a file that not exist
try:
  with open("demo.txt","r") as f:
    data = f.read()
except FileNotFoundError:
  print("file does not exist")

# safe calculator
def calculator():
  try:
    a = float(input("enter the first number: "))
    b = float(input("enter the second number: "))
    op = input("Enter the operation(+,-,/,*): ")

    if op == '+':
      print("Addition: ",a+b)
    elif op == '-':
      print("Subtraction: ",a-b)
    elif op == '/':
      print("Division",a/b)
    elif op == '*':
      print("Multiplication: ",a*b)
    else:
      raise ValueError("Invalid Operation")

  except ZeroDivisionError:
    print("can't devide by zero")
  except ValueError as v:
    print("error",v)
  finally:
    print("work completed, shutting down calculator")

calculator()

# login system
correct_username  = "deepak@4190"
correct_password = "deepak_1112233"

attempt = 0

while attempt < 3:
    username = input("enter your username: ")
    password = input("enter your password: ")

    if username == correct_username and password == correct_password:
      print("successfully login!")
      break
    else:
      print("incorrect credential, try again")
      attempt += 1

if attempt == 3:
  print("maximum attempt is occured")

#  File Reader (with not-found handling)
file = input("enter the file")
try:
  with open(file,"r") as f:
    data = f.read()
    print(data)
except FileNotFoundError:
  print("File not found")

# student marks manager
try:
  Database_management_system = float(input("enter your marks in DBMS : "))
  PHP = float(input("enter your marks PHP : "))
  System_Design  = float(input("enter your marks System Design : "))
  Python_programming = float(input("enter your marks Python language : "))
  Java = float(input("enter your marks in Java Programming : "))

  result = Database_management_system + PHP + System_Design + Python_programming + Java
  average = result / 5
  print(f"total marks: {result} and average of marks is : {round(average,2)}")

except ValueError:
  print("enter the valid marks")

finally:
  print("program ended")