# -*- coding: utf-8 -*-
"""object_classes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bPXgyVzB3pHrKEQdPAPuyveVjG_-yWhZ
"""

# object and classes are basic pillar of oops

# In Python, a class serves as a blueprint or a template for creating objects. It defines a new type of object and encapsulates data (attributes) and functions (methods) that operate on that data.
# used to design the structure and layout of object.

class Student:
  # properties and behavior define here
  pass

# object : object is "bundle" related attributes (variables) and methods (functions)

class Car:
  def __init__(self,model,year,colour,for_sale):
    self.model = model
    self.year = year
    self.colour = colour
    self.for_sale = for_sale
c1 = Car("Mustang",2025,"Red",True)
c2 = Car("Corolla",2020,"Blue",False)
c3 = Car("Porche",2025,"black",False)
print(c1.model)
print(c2.colour)
print(c3.for_sale)

#  __init__() Constructor
# A special method which is used to make object and and it is auto call. its goal is to give initial values.
class Student:
  def __init__(self,name,age):
    self.name = name
    self.age = age

# self Keyword
# self means current object , when object will be created self will point that object
def show(self):
    print(self.name)

class Student:
  def __init__(self,name,age,grades):
    self.name = name
    self.age = age
    self.grades = grades
  def show(self):
    print(f"your name is {self.name} and your age is {self.age} and your gardes is {self.grades}")
s1 = Student("deepak",19,99.78)
s1.show()

class Car:
  def __init__(self,model,year,colour):
    self.model = model
    self.year = year
    self.colour = colour
  def details(self):
    print(f"{self.colour}:{self.model}:{self.year}")
c1 = Car("mustang",2026,"red")
c1.details()

# summary
In Python, classes and objects are fundamental concepts of Object-Oriented Programming (OOP), enabling the modeling of real-world entities and their behaviors in a structured and efficient manner.
Classes and Objects in Python (Explained with Examples)
Python Classes - Learn Object-Oriented Programming in Python ...
Python Classes and Objects | DigitalOcean
How Classes and Objects Work in Python - Earthly Blog
Python Classes and Objects [Guide] â€“ PYnative
Python Classes and Objects - Studyopedia
View all
Classes:
A class serves as a blueprint or a template for creating objects. It defines the structure and behavior that objects of that class will possess.
Attributes:
These are variables defined within a class that represent the data or properties of an object.
Methods:
These are functions defined within a class that represent the actions or behaviors an object can perform. Methods typically take self as their first parameter, which refers to the instance of the object itself.
__init__() Method:
This is a special method, often referred to as the constructor. It is automatically called when a new object of the class is created and is used to initialize the object's attributes.
Objects:
An object is an instance of a class. It is a concrete entity created based on the blueprint defined by its class. Objects encapsulate both data (attributes) and functionality (methods).
Instance: An object is an instance of a class, meaning it is a specific realization of the class's blueprint.
State (Attributes): Each object has its own unique set of attribute values, representing its current state.
Behavior (Methods): Objects can perform actions by calling the methods defined in their class.
Example:
Python

class Car:
    # __init__ method (constructor) to initialize attributes
    def __init__(self, make, model, color):
        self.make = make
        self.model = model
        self.color = color

    # Method to describe the car
    def describe_car(self):
        print(f"This is a {self.color} {self.make} {self.model}.")

# Creating objects (instances) of the Car class
car1 = Car("Toyota", "Camry", "Blue")
car2 = Car("Honda", "Civic", "Red")

# Accessing attributes and calling methods using objects
car1.describe_car()  # Output: This is a Blue Toyota Camry.
car2.describe_car()  # Output: This is a Red Honda Civic.