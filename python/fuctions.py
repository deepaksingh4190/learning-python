# -*- coding: utf-8 -*-
"""fuctions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L4Gxq386CA8ZjGRIKAWG4GBdtztlwOsu
"""

# Functions in Python are self-contained blocks of code designed to perform a specific task. They are fundamental for organizing code, promoting reusability, and improving readability and maintainability and reduce redundancy.

# Defining a Function:
# Functions are defined using the def keyword, followed by the function name, parentheses for parameters, and a colon. The function's code block is indented.

# Types of Functions:

# Built-in Functions:

# These are functions pre-defined in Python, such as print(), len(), abs(), int(), etc.
# User-defined Functions:

# These are functions created by the programmer to perform specific tasks tailored to their program's needs.
# Lambda Functions (Anonymous Functions):

# These are small, single-expression functions defined using the lambda keyword, often used for concise operations or as arguments to higher-order functions like map(), filter(), or reduce().

# Key Concepts:

# Parameters and Arguments:
# Parameters are the variables listed inside the parentheses in the function definition, while arguments are the actual values passed to the function when it is called.

# Return Values:
# Functions can optionally return a value using the return statement. If no return statement is present, the function implicitly returns None.

# Modularity and Reusability:
# Functions allow breaking down complex problems into smaller, manageable units, and the same function can be called multiple times with different arguments, promoting code reuse.

def cal_sum(a,b): #parameters
  sum = a+b
  print(sum)
  return sum #return the values to function
cal_sum(2,3) #calling the function with arguments
cal_sum(20,9)
cal_sum(200,90)

# average of three numbers:
def calc_avg(a,b,c):
  sum = a+b+c
  avg = sum/3
  print(avg)
  return avg
calc_avg(1,2,3)

def happy_birthday(name,age):
  print(f"happy birthday {name}")
  print(f"you are {age} years old")
  return happy_birthday             #return statement is used to end a function and send the result to caller
happy_birthday("deepak",34)
happy_birthday("sagar",45)

def create_name(first_name,last_name):
  first = first_name.capitalize()
  last = last_name.capitalize()
  return first + " " + last
full_name = create_name("deepak","singh")
print(full_name)

# function syntax
def function_name():
    # code block

# simple function:
def greet():
  print("hello bro")
greet()

# Function with Parameters (Inputs)
def greet(name):
  print(f"hello {name}")
greet("deepak")

# Function with Return Value
def square(a):
  return a*a
result = square(4)
print(result)

# default argument: a default values for certain parameters is used when that argument is ommitted. Make your function more flexible , reduce number of arguments
def greet(name="deepak"):
  print(f"hello {name}")
greet()
greet("ravi")

# types of arguments:
1. positional , 2.default , 3.keyword arguments, 4.arbitary arguments

def net_price(list_price,discount=0,tax=0.05):
  return list_price * (1-discount) * (1+tax)
print(net_price(100))
print(net_price(100,0.1))
print(net_price(100,0.1,0.07))

# count of timer
import time
def count(end,start=0):
  for i in range(start,end+2):
    print(i)
    time.sleep(1)
  print("done")
count(12)

# keyword argument : an argument which preceded by identifier,help with readability and order of arguments does not matters.
def greet(name,age):
  print(name,"is",age,"years old.")
greet(name="deepak",age=24)

def hello(greeting,title,first,last):
  print(f"{greeting} {title} {first} {last}")
hello(greeting = "hello",title = "Mr.",first="deepak",last="Singh")

def get_phone(country,state,city,first,last):
  print(f"{country} {state} {city} {first} {last}")
get_phone(country = "India",state = "Rajasthan",city = "Jaipur", first = "Deepak", last = "Singh")

# Arbitrary arguments in Python refer to the ability of a function to accept a variable number of arguments, meaning the exact number of arguments passed to the function is not fixed at the time of its definition.

# Arbitrary Positional Arguments (*args):
# When a parameter in a function definition is prefixed with a single asterisk (*), it collects all non-keyword, variable-length arguments into a tuple.
# This allows the function to be called with any number of positional arguments, which are then accessible as elements of this tuple within the function body.
def sum_numbers(*digits):
  total = 0
  for num in digits:
    total+=num
  return total
result = sum_numbers(1,2,3,4,5,6)
print(result)

def greet_friends(*friends):
    for name in friends:
        print("Hi", name)

greet_friends("Ravi", "Deepak", "Sana")

# Shopping Bill Calculator
def bill_total(*items):
    print("You bought:", items)
    return sum(items)

total = bill_total(120, 45, 30)
print("Total bill:", total)

# Arbitrary Keyword Arguments (`: kwargs`)**:
# When a parameter in a function definition is prefixed with two asterisks (**), it collects all keyword arguments into a dictionary.
# This enables the function to accept any number of keyword arguments, which are
# then stored as key-value pairs within this dictionary.

def display_info(**details):
  for key, values in details.items():
    print(f"{key}: {values}")
display_info(name = "deepak",age = 20,city = "Jaipur",country = "India")

def greet(**data):
    print(f"Hi {data['name']}! You're from {data['city']}.")

greet(name="Ravi", city="Delhi")

def order_summary(**items):
    print("Your order contains:")
    for item, price in items.items():
        print(f"{item} - â‚¹{price}")

order_summary(apple=50, banana=30, milk=60)

# Function to calculate factorial of a number
def factorial(n):
  result = 1
  for i in range(1,n+1):
    result*=i
  return result
factorial(5)

# Function to check if number is prime
def check_for_prime(n):
  if n <= 1:
    return False
  for i in range(2,n):
    if i%n == 0:
      return False
  return True
check_for_prime(5)

def find_max(a,b,c):
  return max(a,b,c)
find_max(23,54,76)

def table(n):
  for i in range(1,11):
    print(f"{n} X {i} =  {n*i}")
table(7)

# Use of *args in sum
def total_sum(*nums):
  return sum(nums)
total_sum(1,2,3,4,5,6,7,7,8,9,76,5,4,3)

def show_profile(**details):
  print("your profile:")
  for key,value in details.items():
    print(f"{key.capitalize()} : {value.capitalize()}")
show_profile(name = "deepak",country = "India",state = "Rajasthan", city = "Jaipur")

# waf to print length of list (list is parameter)
cities = ["Delhi","Jaipur","Gurgao","Noida","Pune"]
heroes = ["Thor","ironman","captainamerica","hulk"]
def print_len(list):
  print(len(list))
print_len(cities)
print_len(heroes)

cities = ["Delhi","Jaipur","Gurgao","Noida","Pune"]
heroes = ["Thor","ironman","captainamerica","hulk"]
def print_list(list):
  for item in list:
    print(item,end=" ")
print_list(heroes)
print("\n")
print_list(cities)

# waf to covert usd to inr
def convert(usd):
  inr = usd*85
  print(f"{usd} $ = {inr} RS.")
convert(43)